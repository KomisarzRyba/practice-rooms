generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  useMultipleFiles = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  studiosCreated Studio[]  @relation("creator")
  studiosJoined  Studio[]  @relation("member")
  Booking        Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Studio {
  id                 String              @id @default(cuid())
  name               String              @unique
  description        String?
  creatorId          String
  creator            User                @relation("creator", fields: [creatorId], references: [id])
  members            User[]              @relation("member")
  rooms              Room[]              @relation("rooms_in_studio")
  invitedUserEmails  String[]
  scheduleProperties ScheduleProperties?
}

model Room {
  id       String    @id @default(cuid())
  name     String    @unique
  studio   Studio    @relation("rooms_in_studio", fields: [studioId], references: [id])
  studioId String
  Booking  Booking[]
}

model ScheduleProperties {
  studio   Studio   @relation(fields: [studioId], references: [id])
  studioId String   @unique
  dayStart DateTime
  dayEnd   DateTime
}

model Booking {
  id        Int      @id @default(autoincrement())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  startTime DateTime
  endTime   DateTime
}
